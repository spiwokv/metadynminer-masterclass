/**
\page masterclass-22-02 PLUMED Masterclass 22-02: Analysis of Plumed output by Metadynminer
\authors Vojtech Spiwok
\date February 14, 2022

\section masterclass-22-02-aims Aims

The aim of this Masterclass is to introduce users to the R package Metadynminer for analysis
of results from metadynamics in Plumed.

\section masterclass-22-02-lo Objectives

Once this Masterclass is completed, users will be able to:

- Install R and its packages.
- Load metadynamics results (`HILLS` file) to Metadynminer.
- Calcule free energy surface and plot it in publication quality.
- Make animation of evolution of free energy surfaces.
- Locate free energy minima and eveluate their relative free energies.
- Use data in Metadynminer objects to do advanced calculations (e.g. reweighting).
 
\section masterclass-22-02-install Setting up the software 

\subsection masterclass-22-02-rinstall Installation

We will use [R](https://www.r-project.org/) installed from [CRAN](https://cloud.r-project.org/).
Go to [CRAN](https://cloud.r-project.org/) and follow the installation instructions for your
operating system. R is Open Source. It is not necessary to use graphical user interface but it
is very useful, especially for making illustrations.

If you plan to use a graphical user interface, the best option is [Rstudio](https://www.rstudio.com/).
[Desktop version of Rstudio](https://www.rstudio.com/products/rstudio/) is Open Source. Follow
the installation instructions for yor operating system.

To install metadynminer open R (in commandline type `R` or open GUI by typing `rstudio` or using
an icon) and type:

\verbatim
install.packages("metadynminer")
\endverbatim

The output should contain: `* DONE (metadynminer)`. If you have an output: `installation of package
metadynminer had non-zero exit status` there was a problem with installation. You may try:

- On MS Windows you may try to install `Rtools`.
- If you have permission issues, you can try commands `Sys.getenv("R_HOME")` and
`Sys.getenv("R_LIBS_USER")` and check the permission of the printed directories. You may change
installation directories by corresponding `Sys.setenv(...)` commands.

You mya check whether Metadynminer was installed correctly by typing:

\verbatim
library(metadynminer)
\endverbatim

This command shold have no output.

\section masterclass-22-02-resources Resources

The data needed for this Masterclass can be found on [GitHub](https://github.com/plumed/masterclass-22-02).
You can clone this repository using the following command:

\verbatim
git clone https://github.com/plumed/masterclass-22-02.git
\endverbatim

The repository contains hills and colvar files, respectively, from 10 ns metadynamics simulation of
alanine dipeptide in water calculated in Plumed. Other input data are availeble from
[Zenodo](XXXX) but are not required in this tutorial. The repo contains:
- `HILLS.cv12` and `COLVAR.cv12` - hills and collective variable + bias report from metadynamics with phi a psi dihedral angles
- `HILLS.cv1` and `COLVAR.cv1` - hills and collective variable + bias report from metadynamics with phi dihedral angle
- `HILLS.cv2` and `COLVAR.cv2` - hills and collective variable + bias report from metadynamics with psi dihedral angle

This data are independent on Plumed version (for version >=2.0).

\section masterclass-22-02-usingr Using R

R is a program and a scrpting language predominantly developed for statistical data analysis. It is popular in
statistics, economy, ecology, bioinformatics and other fileds. Let us quickly introduce R. Open R as described
above and type:

\verbatim
1+1
2-1
3*3
5/2
\endverbatim

This shows addition, subtraction, multiplication and division. Numbers and other objects can be saved
to variables. We advice users to avoid names of variables that can be confused with existing functions
in R. In this masterclass we will use prefix "my" (e.g. `myhills`) to avoid this. Variable names are
case-sensitive. The operator used to save something to is an arrow `<-` (less than followed by minus sign).
You may see R codes with a normal equal sign but we will be puristic in this. Let us show variables in R:
\verbatim
x <- 1+1
x
\endverbatim

In the outputs above there is an unexpected string `[1]`. This is the index of the first item on the line.
This is usefull when dealing with vectors. Vector can be created by implicitely typing its elements to the
function `c()`, by `:` operator and other ways:
\verbatim
x <- c(1, 3, 2)
x
x <- 1:50
x
x <- 50:1
x
\endverbatim

R can also work with 2D and multidimensional matrices. R can work with strings (written in quotes, e.g.
"blue"), Booleans (`TRUE` and `FALSE`, or shortened as `T` and `F`).

R uses functions written as the name of funtion followed by its arguments in brackets:
\verbatim
exp(1)
cos(pi)
\endverbatim

Functions can be applied element-wise:
\verbatim
x<-0:10
cos(x)
\endverbatim

Functions with more variables use specification set by `=`, separated by `,`:
\verbatim
x<-0:100/10
y<-cos(x)
plot(x, y)
plot(x, y, xlab="x axis", ylab="y axis", ylim=c(-2,2))
\endverbatim

Important difference from many other programming environments is that R can freely change number types,
e.g. `3/2` is evaluated as 1.5, unlike Pyhton, which gives 1, because 3 and 2 are integers, not floats.

Another important difference is that R uses indexes of vector items starting with 1 (not 0 line in C/C++,
Python etc.). For example:
\verbatim
x <- c("Carlo", "Gareth", "Giovanni", "Max")
x[2]
\endverbatim
will return Gareth (Python with `<-` replaced by `=` returns Giovanni).

Finally, R can use other types of objects, including objects defined by a user. Their instances can
be accessed by a string operator. For example, the function `prcomp` performs a principal component
analysis. Its output is an object with multiple instances, for example with a rotation matrix:
\verbatim
pcamodel <- prcomp(outer(1:3,1:2))
pcamodel
pcamodel$rotation
\endverbatim

Finally, to quit R you can use the function `q()`. The program ask the user whether he/she wants to
save the data (i.e. variables created in the previous course of the run). We advise users to NOT save
data, i.e. chose the option "n" or function `q(save="n")`. 

\subsection masterclass-22-02-ex-1 Exercise 1: Calculation of the free energy surface from metadynamics hills



As previously mentioned, the first 40 N-terminal residues of the 5-HT1B receptor are quite flexible, while the rest of the 
protein remains more stable during the course of the simulation. In this exercise, you will learn how to use \ref RMSD to
measure deviations from a reference structure. To use this CV, you need to keep in mind that you must specify in the PLUMED input
a PDB file in which you mark the atoms that you want to use to:
- optimally align a conformation to the reference;
- calculate the displacement from the reference conformation after optimal alignment.

Keep in mind that these two sets of atoms might be different! In fact, the objective of this exercise is to calculate:
- the \ref RMSD of the backbone atoms of the first 40 N-terminal residues after aligning the system on the backbone atoms of 
  residues 41 to 390;
- the \ref RMSD of the backbone atoms of residues 41 to 390 after aligning the system on the same set of atoms.

To create the two PDB files needed to define the two \ref RMSD CVs, you can start from the provided PDB file
`5-HT1B.pdb`. Please consult the manual at the \ref RMSD page, in order to:
- create the PLUMED input file to calculate the two CVs defined above (use `TYPE=OPTIMAL`);
- learn how to mark atoms for alignment and displacement in the PDB files;
- check whether PBCs are automatically taken care of or you need to use the \ref WHOLEMOLECULES action.

After analyzing `5-HT1B.xtc` with the \ref driver tool, can you say which part of the receptor is more flexible and deviates more from the
starting conformation during the course of the simulation?

\subsection masterclass-21-1-ex-6 Exercise 6: Aligning conformations to a template

In this exercise, we will learn how to align a MD trajectory to a reference conformation, after fixing possible discontinuities due to PBCs.
The goal is to compute the vertical position of the serotonin ligand with respect to the lipid bilayer. In the simulations of membrane proteins,
typically the initial conformation is oriented so that the lipid bilayer is parallel to the xy plane (look for example at `5-HT1B.pdb`). 
Therefore, initially one could use for example
the coordinate `z` of the geometric center of the ligand to measure how far it is from the membrane bilayer. However, during the simulation:
- the system can translate from its original position;
- the system can be broken by PBCs;

therefore one could not use an absolute position to keep track of the location of the ligand. To solve this problem, there are several PLUMED actions that
can be used to make sure the system is not broken by PBCs, to re-align it to a reference conformation, and thus to use absolute positions safely.

To complete this exercise, the users will need to make heavy use of the PLUMED [manual](https://www.plumed.org/doc-v2.7/user-doc/html/colvarintro.html) to prepare the input file on their own. In the following, some suggestions
will be given:
- first, make sure the entire protein is not broken by PBCs using \ref WHOLEMOLECULES;
- then, make sure the ligand is not broken by PBCs and in the same cell as the protein, using the \ref WRAPAROUND action and the `GROUPBY` option;
- to align the _stable_ protein residues (as defined in \ref masterclass-21-1-ex-5, i.e. residues 41 to 390) to the template `5-HT1B.pdb`, you can use \ref FIT_TO_TEMPLATE;
- at this point, you can safely define the position of the geometric center of the ligand using the \ref POSITION CV with the option `NOPBC`;
- the requested CV is the `z` component of the \ref POSITION CV. 

You can check that your PLUMED input file is correct in two ways. First, you can print out the conformations of the system after the transformations done
by \ref WHOLEMOLECULES, \ref WRAPAROUND, and \ref FIT_TO_TEMPLATE by modifying your input file as follows:

\plumedfile
# Activate MOLINFO functionalities
MOLINFO STRUCTURE=__FILL__
# Here put your PLUMED input file
#
#
# Write coordinates of all the atoms to file after PLUMED transformations
DUMPATOMS FILE=5-HT1B_aligned.gro ATOMS=__FILL__
\endplumedfile

Now, you can visualize the `5-HT1B_aligned.gro` file using [VMD](https://www.ks.uiuc.edu/Research/vmd/).
Second, if you inspect the time series of your CV, this should be a continuous trajectory that spans the range from 9 nm to 18 nm.

\subsection masterclass-21-1-ex-7 Exercise 7: Estimating binding propensity 

In this last exercise, we want to determine the propensity of the serotonin ligand to bind the first 40 N-terminal flexible residues
of the 5-HT1B receptor and if there are hot-spots where binding is more favorite. In order to answer to these questions, the user will:
- compute the fraction of bound conformations over the total number of frames in the MD trajectory;
- for each individual residue and glycan, compute the fraction of bound conformation per residue/glycan;
- dump all bound conformations to a `gro` file, after fixing PBCs as in \ref masterclass-21-1-ex-6;
- for each individual residue and glycan, dump all bound conformations to a separate `gro` file, after fixing PBCs.

To solve this exercise, no template PLUMED input file nor any indication of the procedure to follow will be given. The users should only keep in mind that:
- we arbitrarily define as *bound* a conformation in which at least one pair of atoms of the ligand and of the protein/residue/glycan is closer than 0.4 nm;
- any pre-exisiting CV defined in the PLUMED [manual](https://www.plumed.org/doc-v2.7/user-doc/html/colvarintro.html) can be used;
- any CV defined directly by the user in the PLUMED input file via the \ref CUSTOM action can be used.


*/

link: @subpage masterclass-21-1 

description: This Masterclass explains the syntax of the PLUMED input file and how to use PLUMED to analyze CVs
